apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: jhub-cvre
  namespace: jhub
spec:
  releaseName: jhub-cvre
  interval: 5m
  chart:
    spec:
      sourceRef:
        kind: HelmRepository
        name: jhub
        namespace: jhub
      chart: jupyterhub
      interval: 5m
      version: 2.0.0
  valuesFrom:
    - kind: Secret
      name: jhub-cvre-iam-secrets
      valuesKey: client_id
      targetPath: hub.config.RucioAuthenticator.client_id
    - kind: Secret
      name: jhub-cvre-iam-secrets
      valuesKey: client_secret
      targetPath: hub.config.RucioAuthenticator.client_secret
    - kind: Secret
      name: jhub-cvre-dbconnectstring
      valuesKey: dbconnectstring
      targetPath: hub.db.url
    - kind: ConfigMap
      name: jhub-profiles
      valuesKey: values.yaml
  values:
    proxy:
      service:
        type: ClusterIP
    hub:
      service:
        type: ClusterIP
      # network policy needs to be modified to allow access to the Rucio server
      # (disabling it for now as a workaround, see also the ones for singeluser and proxy below)
      networkPolicy:
        enabled: false
      db:
        type: postgres # secret dbconnect string set in main-helm.tf
      config:
        RucioAuthenticator:
          # client_id: "" # set through secret
          # client_secret: "" # set through secret
          authorize_url: https://iam-escape.cloud.cnaf.infn.it/authorize
          token_url: https://iam-escape.cloud.cnaf.infn.it/token
          userdata_url: https://iam-escape.cloud.cnaf.infn.it/userinfo
          username_key: preferred_username
          scope:
            - openid
            - profile
            - email
      extraConfig:
        token-exchange: |
          import pprint
          import os
          import warnings
          import requests
          from oauthenticator.generic import GenericOAuthenticator

          # custom authenticator to exchange the access token for a refresh token for rucio OIDC to work
          class RucioAuthenticator(GenericOAuthenticator):
              def __init__(self, **kwargs):
                  super().__init__(**kwargs)
                  self.enable_auth_state = True

              def exchange_token(self, token):
                  params = {
                      'client_id': self.client_id,
                      'client_secret': self.client_secret,
                      'grant_type': 'urn:ietf:params:oauth:grant-type:token-exchange',
                      'subject_token': token,
                      'scope': 'openid email profile',
                      'audience': 'rucio'
                  }
                  response = requests.post(self.token_url, data=params)
                  refresh_token = response.json()['access_token']
                  return refresh_token
              
              async def pre_spawn_start(self, user, spawner):
                  auth_state = await user.get_auth_state()
                  pprint.pprint(auth_state)
                  if not auth_state:
                      # user has no auth state
                      return
                  
                  # define token environment variable from auth_state
                  spawner.environment['REFRESH_TOKEN'] = self.exchange_token(auth_state['access_token'])
          
          # set the above authenticator as the default
          c.JupyterHub.authenticator_class = RucioAuthenticator

          # enable authentication state
          c.GenericOAuthenticator.enable_auth_state = True

          if 'JUPYTERHUB_CRYPT_KEY' not in os.environ:
              warnings.warn(
                  "Need JUPYTERHUB_CRYPT_KEY env for persistent auth_state.\n"
                  "    export JUPYTERHUB_CRYPT_KEY=$(openssl rand -hex 32)"
              )
              c.CryptKeeper.keys = [os.urandom(32)]
    singleuser:
      defaultUrl: "/lab"
      # The liefcycle hooks are used to create the Rucio configuration file,
      # and the token file by copying the REFRESH_TOKEN from the environment variable to the token file.
      lifecycleHooks:
        postStart:
          exec:
            command:
              - "sh"
              - "-c"
              - >
                mkdir -p /certs /tmp;
                echo -n $REFRESH_TOKEN > /tmp/rucio_oauth.token;
                echo -n "oauth2:${REFRESH_TOKEN}:iam-escape.cloud.cnaf.infn.it/userinfo" > /tmp/eos_oauth.token;
                chmod 0600 /tmp/eos_oauth.token;
                mkdir -p /opt/rucio/etc;
                echo "[client]" >> /opt/rucio/etc/rucio.cfg;
                echo "rucio_host = https://vre-rucio.cern.ch" >> /opt/rucio/etc/rucio.cfg;
                echo "auth_host = https://vre-rucio-auth.cern.ch" >> /opt/rucio/etc/rucio.cfg;
                echo "ca_cert = /certs/rucio_ca.pem" >> /opt/rucio/etc/rucio.cfg;
                echo "account = $JUPYTERHUB_USER" >> /opt/rucio/etc/rucio.cfg;
                echo "auth_type = oidc" >> /opt/rucio/etc/rucio.cfg;
                echo "oidc_audience = rucio" >> /opt/rucio/etc/rucio.cfg;
                echo "oidc_scope = openid profile offline_access" >> /opt/rucio/etc/rucio.cfg;
                echo "oidc_issuer = escape" >> /opt/rucio/etc/rucio.cfg;
                echo "auth_oidc_refresh_active = true" >> /opt/rucio/etc/rucio.cfg;
                echo "auth_oidc_refresh_before_exp = 20" >> /opt/rucio/etc/rucio.cfg;
                echo "oidc_polling = true" >> /opt/rucio/etc/rucio.cfg;
                echo "auth_token_file_path = /tmp/rucio_oauth.token" >> /opt/rucio/etc/rucio.cfg;
      networkPolicy:
        enabled: false
      storage:
        type: static
        static:
          pvcName: jhub-singleuser # manually created StorageClass with Retain policy and PVC with 800Gi (refer to main-k8s.tf)
        extraVolumes:
          - name: cvmfs-cern-instance 
            persistentVolumeClaim:
              claimName: cvmfs
          - name: eulake-escape-data # mounts the EOS RSE needed for the Rucio JupiterLab extension
            hostPath:
              path: /var/eos-eulake-home/eulake/escape/data
          - name: eulake-escape-tmpdata # mounts the EOS scratch space which is not an RSE
            hostPath:
              path: /var/eos-eulake-home/eulake/escape/tmp_data
          - name: test-eulake-escape-data
            hostPath:
              path: /var/eos-eulake-home-test/eulake/escape/data
          - name: test-eulake-escape-tmpdata
            hostPath:
              path: /var/eos-eulake-home-test/eulake/escape/tmp_data
        extraVolumeMounts:
          - name: cvmfs-cern-instance 
            mountPath: /cvmfs
            # CVMFS automount volumes must be mounted with HostToContainer mount propagation.
            mountPropagation: HostToContainer
          - name: eulake-escape-data # mounts the EOS RSE needed for the Rucio JupiterLab extension
            mountPath: /eos/cern-eos-rse
            mountPropagation: HostToContainer
            readOnly: true 
          - name: eulake-escape-tmpdata # mounts the EOS RSE needed for the Rucio JupiterLab extension
            mountPath: /eos/scratch-space
            mountPropagation: HostToContainer
          - name: test-eulake-escape-data
            mountPath: /eos/test-fusemount-data
            mountPropagation: HostToContainer
            readOnly: true
          - name: test-eulake-escape-tmpdata
            mountPath: /eos/test-fusemount-tmp_data
            mountPropagation: HostToContainer
      image:
        name: ghcr.io/vre-hub/vre-singleuser
        tag: sha-40199b2
        pullPolicy: Always
      # nodeSelector:  # Keeping it as a comment to mark it as TODO
      #   # makes sure EOS eulake fuse mount is done on nodes designated to have the fuse mount
      #   jupyter-role: singleuser
      cmd: null
      extraEnv:
        JUPYTERHUB_SINGLEUSER_APP: "notebook.notebookapp.NotebookApp"
        RUCIO_MODE: "replica"
        RUCIO_WILDCARD_ENABLED: "1"
        RUCIO_BASE_URL: "https://vre-rucio.cern.ch"
        RUCIO_AUTH_URL: "https://vre-rucio-auth.cern.ch"
        RUCIO_WEBUI_URL: "https://vre-rucio-ui.cern.ch"
        RUCIO_DISPLAY_NAME: "RUCIO - CERN VRE"
        RUCIO_NAME: "vre-rucio.cern.ch"
        RUCIO_SITE_NAME: "CERN"
        RUCIO_OIDC_AUTH: "file"
        RUCIO_OIDC_FILE_NAME: "/tmp/rucio_oauth.token"
        RUCIO_DEFAULT_AUTH_TYPE: "oidc"
        RUCIO_OAUTH_ID: "rucio"
        RUCIO_DEFAULT_INSTANCE: "vre-rucio.cern.ch"
        RUCIO_DESTINATION_RSE: "CERN-EOS"
        RUCIO_RSE_MOUNT_PATH: "/eos/cern-eos-rse"
        RUCIO_PATH_BEGINS_AT: "4"
        RUCIO_CA_CERT: "/certs/rucio_ca.pem"
        OAUTH2_TOKEN: "FILE:/tmp/eos_oauth.token"
        # RUCIO_VOMS_VOMSES_PATH: "/etc/vomses"
        # RUCIO_VOMS_CERTDIR_PATH: "/etc/grid-security/certificates"
        # RUCIO_VOMS_VOMSDIR_PATH: "/etc/grid-security/vomsdir"
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt" # this issues a certificate for the domain through cert-manager automatically
      hosts:
        - jhub-vre.cern.ch 
      tls:
        - hosts:
            - jhub-vre.cern.ch
          secretName: cert-manager-tls-ingress-secret-jhub
               
