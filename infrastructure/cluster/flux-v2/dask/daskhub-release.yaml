apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: daskhub
  namespace: daskhub
  annotations:
    flux.weave.works/automated: "false" 
   
spec:
  releaseName: dask
  interval: 5m
  chart:
    spec:
      sourceRef:
        kind: HelmRepository
        name: daskhub-charts
        namespace: daskhub
      interval: 1m
      chart: daskhub
      version: 2023.1.0

  valuesFrom:
    - kind: Secret
      name: nb-vre-iam-client
      valuesKey: client_id
      targetPath: jupyterhub.hub.config.GenericOAuthenticator.client_id
    - kind: Secret
      name: nb-vre-iam-client
      valuesKey: client_secret
      targetPath: jupyterhub.hub.config.GenericOAuthenticator.client_secret
    - kind: Secret
      name: nb-vre-api-token
      valuesKey: apiToken
      targetPath: hub.services.dask-gateway.apiToken
    - kind: Secret
      name: nb-vre-api-token
      valuesKey: apiToken
      targetPath: dask-gateway.gateway.auth.jupyterhub.apiToken
    - kind: Secret
      name: daskhub-vre-dbconnectstring
      valuesKey: dbconnectstring
      targetPath: jupyterhub.hub.db.url

  values:

    rbac:
      enabled: true  # Create and use roles and service accounts on an RBAC-enabled cluster.

    jupyterhub:

      proxy:
        # run only on master nodes
        chp:
            nodeSelector:
                  node-role.kubernetes.io/master: ""
            tolerations:
                - key: "node-role.kubernetes.io/master"
                  operator: Exists

      hub:

        networkPolicy:
          enabled: false   
        db:
          type: postgres
          
          # type: sqlite-memory
          # upgrade: true

        config:
          GenericOAuthenticator:
            oauth_callback_url: https://nb-vre.cern.ch/hub/oauth_callback
            authorize_url: https://iam-escape.cloud.cnaf.infn.it/authorize
            token_url: https://iam-escape.cloud.cnaf.infn.it/token 
            userdata_url: https://iam-escape.cloud.cnaf.infn.it/userinfo
            scope:
              - openid
              - profile
              - email
              - offline_access
            username_key: preferred_username
          JupyterHub:
              authenticator_class: generic-oauth

        # run only on master nodes
        nodeSelector:
              node-role.kubernetes.io/master: ""
        tolerations:
            - key: "node-role.kubernetes.io/master"
              operator: Exists

        extraConfig:
          # Register Dask Gateway service and setup singleuser environment.
          00-add-dask-gateway-values: |
            # 1. Sets `DASK_GATEWAY__PROXY_ADDRESS` in the singleuser environment.
            # 2. Adds the URL for the Dask Gateway JupyterHub service.
            import os

            # These are set by jupyterhub.
            release_name = os.environ["HELM_RELEASE_NAME"]
            release_namespace = os.environ["POD_NAMESPACE"]

            if "PROXY_HTTP_SERVICE_HOST" in os.environ:
                # https is enabled, we want to use the internal http service.
                gateway_address = "http://{}:{}/services/dask-gateway/".format(
                    os.environ["PROXY_HTTP_SERVICE_HOST"],
                    os.environ["PROXY_HTTP_SERVICE_PORT"],
                )
                print("Setting DASK_GATEWAY__ADDRESS {} from HTTP service".format(gateway_address))
            else:
                gateway_address = "http://proxy-public/services/dask-gateway"
                print("Setting DASK_GATEWAY__ADDRESS {}".format(gateway_address))

            # Internal address to connect to the Dask Gateway.
            c.KubeSpawner.environment.setdefault("DASK_GATEWAY__ADDRESS", gateway_address)
            # Internal address for the Dask Gateway proxy.
            c.KubeSpawner.environment.setdefault("DASK_GATEWAY__PROXY_ADDRESS", "gateway://traefik-{}-dask-gateway.{}:80".format(release_name, release_namespace))
            # Relative address for the dashboard link.
            c.KubeSpawner.environment.setdefault("DASK_GATEWAY__PUBLIC_ADDRESS", "/services/dask-gateway/")
            # Use JupyterHub to authenticate with Dask Gateway.
            c.KubeSpawner.environment.setdefault("DASK_GATEWAY__AUTH__TYPE", "jupyterhub")

            # Adds Dask Gateway as a JupyterHub service to make the gateway available at
            # {HUB_URL}/services/dask-gateway
            service_url = "http://traefik-{}-dask-gateway.{}".format(release_name, release_namespace)
            for service in c.JupyterHub.services:
                if service["name"] == "dask-gateway":
                    if not service.get("url", None):
                        print("Adding dask-gateway service URL")
                        service.setdefault("url", service_url)
                    break
            else:
                print("dask-gateway service not found. Did you set jupyterhub.hub.services.dask-gateway.apiToken?")

      singleuser: 
      
        image:
          name: ghcr.io/egazzarr/docker-tests-dask-root
          # name: dask-root  # Image to use for singleuser environment. Must include dask-gateway.
          tag: latest
          pullPolicy: Always

        defaultUrl: "/lab"  # Use jupyterlab by defualt.

        memory:
          guarantee: 500M
          limit: 1G
        cpu:
          guarantee: 0.3
          limit: 1
        storage:
          type: none
          
        # storage:
        #   type: dynamic
        #   capacity: 1Gi
        #   dynamic:
        #     storageClass: standard
        # default is 300s, sometimes Jetstream volumes are slow to attach
        startTimeout: 600
        # See https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/issues/38
        lifecycleHooks:
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  chmod 700 .ssh;
                  chmod g-s .ssh;
                  chmod 600 .ssh/*;
                  exit 0
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt" # this issues a certificate for the domain through cert-manager automatically, and creates the secret in ingress.tls.hosts.secretName
        hosts:
          - nb-vre.cern.ch 
        tls:
          - hosts:
              - nb-vre.cern.ch
            secretName: cert-manager-tls-ingress-secret-nb

    dask-gateway:   
      enabled: true  # Enabling dask-gateway will install Dask Gateway as a dependency.
      # Futher Dask Gateway configuration goes here
      # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml
      gateway:
        prefix: "/services/dask-gateway"  # Users connect to the Gateway through the JupyterHub service.
        auth:
          type: jupyterhub  # Use JupyterHub to authenticate with Dask Gateway
      traefik:
        service:
          type: ClusterIP  # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.

    dask-kubernetes:
      # Use dask-kubernetes, rather than Dask Gateway, for creating Dask Clusters.
      # Enabling this also requires
      # 1. Setting `jupyterhub.singleuser.serviceAccountName: daskkubernetes`.
      # 2. Ensuring that `dask-kubernetes` is in your singleuser environment.
      enabled: false
  