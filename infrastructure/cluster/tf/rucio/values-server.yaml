# Default values for rucio.
# This is a YAML-formatted file. 
# Declare variables to be passed into your templates.

## replicaCount gives the number of server pods to run 
replicaCount: 2
authReplicaCount: 2 

image:
  repository: rucio/rucio-server
  tag: release-1.30.0
  pullPolicy: Always

############################ BASIC CONFIG FOR SERVERS 
# useSSL:
#   server: false
#   authServer: false

# service:
#   type: ClusterIP
#   port: 80
#   targetPort: 80
#   protocol: TCP
#   name: http
#   annotations: {}

# authService:
#   type: ClusterIP
#   port: 80
#   targetPort: 80
#   protocol: TCP
#   name: http
#   annotations: {}

# serverType:
#   server: api
#   authServer: auth
#   traceServer: trace

# ingress:
#   enabled: true
#   path: /
#   hosts:
#     - "vre-rucio.cern.ch"

# authIngress:
#   enabled: true
#   path: /
#   hosts:
#     - "vre-rucio-auth.cern.ch"

############################### VRE- INGRESSES 
useSSL:
  server: false
  authServer: true

service:
  type: ClusterIP
  port: 80
  targetPort: 80
  protocol: TCP
  name: http

authService:
  type: ClusterIP
  port: 443
  targetPort: 443
  protocol: TCP
  name: https

ingress:
  enabled: true
  path: /
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/frontend-entry-points: http, https
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-ssl-secret: vre-rucio-server.tls-secret
  hosts:
    - "vre-rucio.cern.ch"
  tls:
    - secretName: vre-rucio-server.tls-secret

authIngress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-ssl-server-name: "vre-rucio-auth.cern.ch"
  hosts:
    - "vre-rucio-auth.cern.ch"
  path: /

################################# VRE: LOAD BALANCING 
# useSSL:
#   server: true
#   authServer: true

# The API server listens on port 6443 (by default). 
# Therefore, expose the API server on port 443 and listen to 6443. 

# service:
#   type: LoadBalancer
#   port: 443
#   targetPort: 443
#   protocol: TCP
#   name: https
#   annotations:
#     # These annotations are only required for cluster templates <=1.18
#     loadbalancer.openstack.org/network-id: "798d00f3-2af9-48a0-a7c3-a26d909a2d64"
#     service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
#     loadbalancer.openstack.org/cascade-delete: "false"

# authService:
#   type: LoadBalancer
#   port: 443
#   targetPort: 443
#   protocol: TCP
#   name: https
#   annotations:
#     # These annotations are only required for cluster templates <=1.18
#     loadbalancer.openstack.org/network-id: "798d00f3-2af9-48a0-a7c3-a26d909a2d64"
#     service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
#     loadbalancer.openstack.org/cascade-delete: "false"

serverType:
  server: flask
  authServer: flask

monitoring:
  enabled: true

automaticRestart:
  enabled: 1
  image:
    repository: bitnami/kubectl
    tag: latest
    pullPolicy: IfNotPresent
  schedule: "17 1 * * *"
  selectorLabel: "'app in (rucio-server,rucio-server-trace,rucio-server-auth)'"
  resources:
    limits:
     cpu: 500m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi

additionalSecrets:
  - volumeName: rucio-db
    secretName: rucio-db
    mountPath: /opt/rucio/etc/rucio-db
    subPath: rucio-db
  - volumeName: idpsecrets
    secretName: idpsecrets
    mountPath: /opt/rucio/etc/idpsecrets.json
    subPath: idpsecrets.json
  - volumeName: rse-accounts
    secretName: rse-accounts
    mountPath: /opt/rucio/etc/rse-accounts.json
    subPath: rse-accounts.json
  # - volumeName: auth-hostcert
  #   secretName: auth-hostcert
  #   mountPath: /etc/grid-security/hostcert.pem
  #   subpath: hostcert.pem
  # - volumeName: rucio-server-cvre-auth-hostkey
  #   secretName: rucio-server-cvre-auth-hostkey
  #   mountPath: /etc/grid-security/hostkey.pem

  # - volumeName: gcssecret
  #   secretName: gcssecret
  #   mountPath: /opt/rucio/etc/gcs_rucio.json
  #   subPath: gcs_rucio.json

wsgi:  #ELENA: could be good to have?
  daemonProcesses: "4"
  daemonThreads: "4"

httpd_config:
  mpm_mode: "event"
  timeout: "300"
  enable_status: "True"
  legacy_dn: "True"
  keep_alive: "On"
  keep_alive_timeout: "5"
  max_keep_alive_requests: "128"
  server_limit: "10"
  start_servers: "4"
  thread_limit: "128"
  threads_per_child: "128"
  min_spare_threads: "256"
  max_spare_threads: "512"
  max_request_workers: "1280"
  max_connections_per_child: "2048"

## values used to configure Rucio
config:

  database:
    ## config.database.default: the connection string for the database (default: "sqlite:////tmp/rucio.db")
    # default: "sqlite:////tmp/rucio.db"
    ## config.database.schema: the schema used in the DB. only necessary when using Oracle.
    # schema: ""
    ## config.database.pool_reset_on_return: set the “reset on return” behavior of the pool (default: "rollback")
    # pool_reset_on_return: "rollback"
    ## config.database.echo: flag to control the logging of all statements to stdout (default: "0")
    # echo: "0"
    ## config.database.po0l_recycle: this setting causes the pool to recycle connections after the given number of seconds has passed (default: "600")
    # pool_recycle: "600"
    ## config.database.pool_size: the number of connections to keep open inside the connection pool
    pool_size: 10
    ## config.database.pool_timeout: number of seconds to wait before giving up on getting a connection from the pool
    # pool_timeout: ""
    ## config.database.maxoverflow: the number of connections to allow in connection pool "overflow"
    max_overflow: 20
    ## config.database.powuseraccount: user used to check the DB
    # powuseraccount: ""
    ## config.database.powuseraccount: password for user used to check the DB
    # powuserpassword: ""
    
  oidc:
    idpsecrets: "/opt/rucio/etc/idpsecrets.json"
    admin_issuer: "escape"
    expected_audience: "rucio"
    expected_scope: "openid profile"

  policy:
    ## config.permission.policy: (default "generic")
    permission: "escape"
    ## config.permission.schema: (default "generic")
    schema: "escape"
    ## config.permission.lfn2pfn_algorithm_default: (default "hash")
    # lfn2pfn_algorithm_default: "hash"
    ## config.permission.support: (default "https://github.com/rucio/rucio/issues/")
    # support: "https://github.com/rucio/rucio/issues/"
    ## config.permission.support_rucio: (default "https://github.com/rucio/rucio/issues/")
    # support_rucio: "https://github.com/rucio/rucio/issues/"

  ## Only necessary for webui deployments
  # webui:
    ## config.webui.usercert:  (default "/opt/rucio/etc/usercert_with_key.pem")
    # usercert: "/opt/rucio/etc/usercert_with_key.pem"

serverResources: 
  limits:
    cpu: "4000m"
    memory: "4000Mi"
  requests:
    cpu: "2000m"
    memory: "2000Mi"

authServerResources:
  limits:
      cpu: "4000m"
      memory: "4000Mi"
  requests:
    cpu: "2000m"
    memory: "2000Mi"

